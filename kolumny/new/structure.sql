DROP TABLE WORKLOAD_METRICS;
DROP TABLE WORKLOAD_PLANS;
DROP TABLE WORKLOAD_SQL;

CREATE TABLE WORKLOAD_SQL (
    id NUMBER GENERATED ALWAYS AS IDENTITY INCREMENT BY 1 START WITH 1 NOT NULL PRIMARY KEY,
    name VARCHAR2(32) NOT NULL,
    code VARCHAR2(4000) NOT NULL
);

CREATE TABLE WORKLOAD_METRICS (
    id NUMBER GENERATED ALWAYS AS IDENTITY INCREMENT BY 1 START WITH 1 NOT NULL PRIMARY KEY,
    plan_id NUMBER NOT NULL,
    run_number NUMBER NOT NULL,
    execution_time NUMBER NOT NULL
);

CREATE TABLE WORKLOAD_PLANS (
    id NUMBER GENERATED ALWAYS AS IDENTITY INCREMENT BY 1 START WITH 1 NOT NULL PRIMARY KEY,
    sql_id NUMBER NOT NULL,
    generation_time TIMESTAMP NOT NULL,
    plan CLOB NOT NULL
);

ALTER TABLE WORKLOAD_METRICS
    ADD FOREIGN KEY (plan_id) REFERENCES WORKLOAD_PLANS(id);
    
ALTER TABLE WORKLOAD_PLANS
    ADD FOREIGN KEY (sql_id) REFERENCES WORKLOAD_SQL(id);

INSERT INTO WORKLOAD_SQL (NAME, CODE) 
VALUES ('Grades analysis', 'SELECT q.name, q.surname, q.gender, q.total_points, q.position, g1.symbol AS best_grade, s1.name AS best_subject, g2.symbol AS worst_grade, s2.name AS worst_subject FROM ( SELECT students.name, students.surname, students.gender, SUM(points.value) AS total_points, quidditch_team_members.position, MAX(averages.rounded_avg) KEEP (DENSE_RANK FIRST ORDER BY averages.accurate_avg DESC) AS max_grade, MAX(averages.subject_id) KEEP (DENSE_RANK FIRST ORDER BY averages.accurate_avg DESC) AS best_subject, MAX(averages.rounded_avg) KEEP (DENSE_RANK FIRST ORDER BY averages.accurate_avg ASC) AS min_grade, MAX(averages.subject_id) KEEP (DENSE_RANK FIRST ORDER BY averages.accurate_avg ASC) AS worst_subject FROM students INNER JOIN houses ON students.house_id = houses.id INNER JOIN points ON students.id = points.student_id INNER JOIN grades ON students.id = grades.student_id LEFT JOIN quidditch_team_members ON students.id = quidditch_team_members.student_id INNER JOIN ( SELECT grades.student_id, grades.subject_id, AVG(grades_enum.value) AS ACCURATE_AVG, ROUND(AVG(grades_enum.value), 0) AS ROUNDED_AVG FROM grades INNER JOIN grades_enum ON grades.value = grades_enum.symbol GROUP BY grades.student_id, grades.subject_id ) averages ON averages.student_id = students.id WHERE houses.name = ''Gryffindor'' AND students.year >= 1 AND students.year <= 7 AND points.award_date >= TO_DATE(''2023-09-02'', ''YYYY-MM-DD'') AND points.award_date <= TO_DATE(''2024-06-25'', ''YYYY-MM-DD'') AND students.id NOT IN ( SELECT students.id FROM students INNER JOIN grades ON students.id = grades.student_id INNER JOIN grades_enum ON grades.value = grades_enum.symbol WHERE grades.award_date >= TO_DATE(''2023-09-02'', ''YYYY-MM-DD'') AND grades.award_date <= TO_DATE(''2024-06-25'', ''YYYY-MM-DD'') AND ( grades_enum.value < ( SELECT grades_enum.value FROM grades_enum WHERE grades_enum.symbol = ''T'' ) OR grades_enum.value > ( SELECT grades_enum.value FROM grades_enum WHERE grades_enum.symbol = ''O'' ) ) ) GROUP BY students.id, students.name, students.surname, students.gender, quidditch_team_members.position ) q INNER JOIN grades_enum g1 ON q.max_grade = g1.value INNER JOIN grades_enum g2 ON q.min_grade = g2.value INNER JOIN subjects s1 ON q.best_subject = s1.id INNER JOIN subjects s2 ON q.worst_subject = s2.id ORDER BY 4 DESC');

INSERT INTO WORKLOAD_SQL (NAME, CODE) 
VALUES ('Points summary', 'SELECT houses.name, SUM(points.value), t1.name AS BEST_TEACHER_NAME, t1.surname AS BEST_TEACHER_SURNAME, t2.name AS WORST_TEACHER_NAME, t2.surname AS WORST_TEACHER_SURNAME, m.best_month, s.best_student_name, s.best_student_surname FROM houses INNER JOIN students ON houses.id = students.house_id INNER JOIN points ON students.id = points.student_id INNER JOIN ( SELECT q.house_id, MAX(q.teacher_id) KEEP (DENSE_RANK FIRST ORDER BY q.total_points DESC) AS FAVOURITE_TEACHER, MAX(q.teacher_id) KEEP (DENSE_RANK FIRST ORDER BY q.total_points ASC) AS LEAST_FAVOURITE_TEACHER FROM ( SELECT students.house_id, points.teacher_id, SUM(points.value) as TOTAL_POINTS FROM students INNER JOIN points ON students.id = points.student_id WHERE points.award_date >= TO_DATE(''2023-09-02'', ''YYYY-MM-DD'') AND points.award_date <= TO_DATE(''2024-06-28'', ''YYYY-MM-DD'') GROUP BY students.house_id, points.teacher_id ) q GROUP BY q.house_id ) t ON t.house_id = houses.id INNER JOIN ( SELECT q.house_id, MAX(q.award_month) KEEP (DENSE_RANK FIRST ORDER BY q.total_points DESC) AS BEST_MONTH FROM ( SELECT students.house_id, EXTRACT(MONTH FROM points.award_date) AS AWARD_MONTH, SUM(points.value) AS TOTAL_POINTS FROM points INNER JOIN students ON points.student_id = students.id WHERE points.award_date >= TO_DATE(''2023-09-02'', ''YYYY-MM-DD'') AND points.award_date <= TO_DATE(''2024-06-28'', ''YYYY-MM-DD'') GROUP BY students.house_id, EXTRACT(MONTH FROM points.award_date) ) q GROUP BY q.house_id ) m ON m.house_id = houses.id INNER JOIN teachers t1 ON t1.id = t.favourite_teacher INNER JOIN teachers t2 ON t2.id = t.least_favourite_teacher INNER JOIN ( SELECT students.house_id, MAX(students.name) KEEP (DENSE_RANK FIRST ORDER BY q.total_points DESC) AS BEST_STUDENT_NAME, MAX(students.surname) KEEP (DENSE_RANK FIRST ORDER BY q.total_points DESC) AS BEST_STUDENT_SURNAME FROM students INNER JOIN ( SELECT points.student_id, SUM(points.value) as TOTAL_POINTS FROM points WHERE points.award_date >= TO_DATE(''2023-09-02'', ''YYYY-MM-DD'') AND points.award_date <= TO_DATE(''2024-06-28'', ''YYYY-MM-DD'') GROUP BY points.student_id ) q ON students.id = q.student_id GROUP BY students.house_id ) s ON s.house_id = houses.id WHERE points.award_date >= TO_DATE(''2023-09-02'', ''YYYY-MM-DD'') AND points.award_date <= TO_DATE(''2024-06-28'', ''YYYY-MM-DD'') GROUP BY houses.name, t1.name, t1.surname, t2.name, t2.surname, m.best_month, s.best_student_name, s.best_student_surname');

INSERT INTO WORKLOAD_SQL (NAME, CODE) 
VALUES ('Best students display', 'WITH monthly_averages AS ( SELECT grades.student_id, TO_CHAR(grades.award_date, ''YYYY-MM'') AS month, AVG(grades_enum.value) AS avg_grade FROM grades INNER JOIN grades_enum ON grades.value = grades_enum.symbol WHERE grades.award_date BETWEEN TO_DATE(''2023-09-02'', ''YYYY-MM-DD'') AND TO_DATE(''2024-06-28'', ''YYYY-MM-DD'') GROUP BY grades.student_id, TO_CHAR(grades.award_date, ''YYYY-MM'') ), top_students AS ( SELECT ROW_NUMBER() OVER (ORDER BY ROUND(AVG(ma.avg_grade), 2) DESC, NVL(SUM(p.value), 0) DESC) AS rank, s.name || '' '' || s.surname AS student_name, ma.month AS month, h.name AS house_name, s.year, ROUND(AVG(ma.avg_grade), 2) AS avg_grade, NVL(SUM(p.value), 0) AS total_points FROM monthly_averages ma INNER JOIN Students s ON ma.student_id = s.id INNER JOIN Houses h ON s.house_id = h.id LEFT JOIN Points p ON s.id = p.student_id WHERE p.award_date BETWEEN TO_DATE(''2023-09-02'', ''YYYY-MM-DD'') AND TO_DATE(''2024-06-28'', ''YYYY-MM-DD'') GROUP BY ma.student_id, ma.month, s.name, s.surname, h.name, s.year ) SELECT month, rank, student_name, house_name, year, avg_grade, total_points FROM top_students WHERE rank <= 10 ORDER BY rank');

INSERT INTO WORKLOAD_SQL (NAME, CODE) 
VALUES ('Raise grades', 'MERGE INTO Grades g USING ( WITH eligible_students AS ( SELECT s.id AS student_id, s.name || '' '' || s.surname AS student_name, h.name AS house_name, NVL(SUM(p.value), 0) AS total_points FROM Students s JOIN Houses h ON s.house_id = h.id LEFT JOIN Points p ON s.id = p.student_id WHERE INSTR('','' || ''Ravenclaw'' || '','', '','' || h.name || '','') > 0 GROUP BY s.id, s.name, s.surname, h.name HAVING NVL(SUM(p.value), 0) >= 150 ), eligible_teachers AS ( SELECT id, name || '' '' || surname AS teacher_name FROM Teachers WHERE UPPER(''ALL'') = ''ALL'' OR INSTR('','' || ''ALL'' || '','', '','' || id || '','') > 0 ), grades_to_update AS ( SELECT g.id AS grade_id, g.student_id, g.teacher_id, g.value AS current_grade, CASE g.value WHEN ''T'' THEN ''D'' WHEN ''D'' THEN ''P'' WHEN ''P'' THEN ''A'' WHEN ''A'' THEN ''E'' WHEN ''E'' THEN ''O'' ELSE g.value END AS new_grade, ROW_NUMBER() OVER ( PARTITION BY g.student_id ORDER BY ge.value ASC, DBMS_RANDOM.VALUE) AS grade_rank FROM Grades g JOIN Grades_Enum ge ON g.value = ge.symbol JOIN eligible_students es ON g.student_id = es.student_id JOIN eligible_teachers et ON g.teacher_id = et.id WHERE g.value != ''O'' AND g.value != ''E'' ) SELECT grade_id, new_grade FROM grades_to_update WHERE grade_rank <= 1 ) src ON (g.id = src.grade_id) WHEN MATCHED THEN UPDATE SET g.value = src.new_grade');

INSERT INTO WORKLOAD_SQL (NAME, CODE) 
VALUES ('Assign subjects', 'INSERT INTO students_subjects (student_id, subject_id) SELECT s.id, sub.id FROM students s JOIN subjects sub ON s.year = sub.year WHERE s.year BETWEEN 1 AND 7 AND NOT EXISTS (SELECT 1 FROM students_subjects ss WHERE ss.student_id = s.id AND ss.subject_id = sub.id) AND s.id NOT IN (SELECT DISTINCT failed.student_id FROM (SELECT g.student_id, g.subject_id, AVG(ge.value) FROM grades g JOIN grades_enum ge ON g.value = ge.symbol GROUP BY g.student_id, g.subject_id HAVING AVG(ge.value) < 3.5) failed) UNION SELECT s.id, sub.id FROM students s JOIN quidditch_team_members qtm ON s.id = qtm.student_id CROSS JOIN subjects sub WHERE sub.name = ''Flying'' AND s.year <> sub.year AND NOT EXISTS (SELECT 1 FROM students_subjects ss WHERE ss.student_id = s.id AND ss.subject_id = sub.id) AND s.id NOT IN (SELECT DISTINCT failed.student_id FROM (SELECT g.student_id, g.subject_id, AVG(ge.value) FROM grades g JOIN grades_enum ge ON g.value = ge.symbol GROUP BY g.student_id, g.subject_id HAVING AVG(ge.value) < 3.5) failed)');

INSERT INTO WORKLOAD_SQL (NAME, CODE) 
VALUES ('Remove points', 'DELETE FROM points WHERE points.student_id IN( SELECT q.student_id FROM ( SELECT grades.student_id, grades.subject_id, AVG(grades_enum.value) FROM grades INNER JOIN grades_enum ON grades.value = grades_enum.symbol WHERE grades.award_date >= TO_DATE(''2023-09-01'', ''YYYY-MM-DD'') AND grades.award_date <= TO_DATE(''2023-09-07'', ''YYYY-MM-DD'') HAVING AVG(grades_enum.value) < 4 GROUP BY grades.student_id, grades.subject_id ) q HAVING COUNT(q.subject_id) >= 4 GROUP BY q.student_id ) AND points.value > 0');
